[자바2] j_12_조아현_20215247

///////
(1) 작업 내용이 들어있는 Work 클래스를 작성하세요.
 - 필드 : private int num
 - 메소드 getNum()
 : 한 순간에 하나의 스레드만 접근할 수 있는 메소드
 : num값을 1증가 시킨 후 증가된 num 값을 리턴.
 - 메소드 threadWork()
 : 무한 반복을 이용하여 현재 threadWork() 메소드를 사용하고 있는 스레드의 이
름과 getNum()에서 리턴 받은 값 num 값을 출력.
 : getNum()에서 리턴 받은 값이 10 이상이면 스레드의 이름과 “반복문 탈출“ 메시
지 출력 후 반복 탈출
 : getNum()에서 리턴 받은 값이 10 미만이면 0.5초 sleep 후 반복의 처음으로 이
동. 
///
Work.java
///
public class Work {
	
	private int num = 0;
	
	public synchronized int getNum() {
		num += 1;
		return num;
	}

	public void threadWork() {
		while(true) {
			System.out.println( Thread.currentThread().getName() + ", " +getNum());
				if(num < 10) {
					try {
						Thread.sleep(500);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					continue;
				}
				else if(num >= 10) {
					System.out.println(Thread.currentThread().getName() + ", 반복문 탈출");
					break;
				}
		}
	}
}
////
 (2) Thread를 상속받은 Job 클래스를 작성하세요.
 - 필드 : private Work w //Work 클래스 타입의 객체.
 - 생성자 : Work 타입의 객체를 전달 받아 w객체 필드에 저장.
 - 스레드 메소드 run()
 : w객체의 threadWork() 호출,
 : 현재 run() 메소드를 호출하고 있는 스레드의 이름과 “종료“ 메시지 출력.
///
Job.java
///
public class Job extends Thread{
	
	private Work w;
	
	public Job(Work a) {
		w = a;
	}
	
	public void run() {
		w.threadWork();
		System.out.println( getName() + ", 종료");
	}
}
///
Test.java
///
public class Test {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		System.out.println("20215247_조아현\n");

		Work w = new Work();
		
		Job tha = new Job(w); //w 공유할 객체 보냄
		tha.setName("ThreadA");
		tha.start(); // 스레드 시작
		
		Job thb = new Job(w);
		thb.setName("ThreadB");
		thb.start(); // 스레드 시작
		
	}

}
///